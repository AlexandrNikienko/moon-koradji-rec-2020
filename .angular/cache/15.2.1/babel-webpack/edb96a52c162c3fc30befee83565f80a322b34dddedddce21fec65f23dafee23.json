{"ast":null,"code":"export class Crystalization {\n  constructor() {\n    this.template = `<div class=\"crystalization\">\n\t\t\t\t\t\t\t<div class=\"crystalization__glow\"></div>\n\t\t\t\t\t\t\t<div class=\"crystalization__overlay\"></div>\n\t\t\t\t\t\t\t<canvas class=\"crystalization__canvas\"></canvas>\n\t\t\t\t\t\t</div>`;\n  }\n  createHTML(selector) {\n    let el = document.querySelector(selector);\n    el.insertAdjacentHTML('afterbegin', this.template);\n    if (selector !== 'body') {\n      let wrapper = el.querySelector('.crystalization');\n      el.style.position = 'relative';\n      wrapper.style.position = 'absolute';\n    }\n  }\n  init(selector = 'body') {\n    this.createHTML(selector);\n    var canvas = document.querySelector(\".crystalization__canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    var bgg = document.querySelector(\".crystalization__glow\");\n    var w = ctx.canvas.width = window.innerWidth;\n    var h = ctx.canvas.height = window.innerHeight;\n    window.onresize = function () {\n      w = ctx.canvas.width = window.innerWidth;\n      h = ctx.canvas.height = window.innerHeight;\n      maxHeight = h * .9;\n      minHeight = h * .5;\n      dots = [];\n      pushDots();\n      ctx.globalCompositeOperation = \"lighter\";\n    };\n    document.querySelector(\".crystalization__overlay\").addEventListener(\"click\", function () {\n      hue = Math.random() * 360;\n      bgg.style.background = \"radial-gradient(ellipse at center, hsla(\" + hue + \",50%,50%,.8) 0%,rgba(0,0,0,0) 100%)\";\n      dots = [];\n      pushDots();\n    });\n    var dots = [];\n    var md = 100;\n    var maxWidth = 15;\n    var minWidth = 2;\n    var maxHeight = h * .9;\n    var minHeight = h * .5;\n    var maxSpeed = 35;\n    var minSpeed = 6;\n    var hue = 230;\n    var hueDif = 50; // Hue +/-\n    var glow = 10; // Turn this off for better performance\n    ctx.globalCompositeOperation = \"lighter\";\n    function pushDots() {\n      for (let i = 1; i < md; i++) {\n        dots.push({\n          x: Math.random() * w,\n          y: Math.random() * h / 2,\n          h: Math.random() * (maxHeight - minHeight) + minHeight,\n          w: Math.random() * (maxWidth - minWidth) + minWidth,\n          c: Math.random() * (hue + hueDif - (hue - hueDif)) + (hue - hueDif),\n          m: Math.random() * (maxSpeed - minSpeed) + minSpeed\n        });\n      }\n    }\n    pushDots();\n    function render() {\n      ctx.clearRect(0, 0, w, h);\n      for (let i = 1; i < dots.length; i++) {\n        ctx.beginPath();\n        const grd = ctx.createLinearGradient(dots[i].x, dots[i].y, dots[i].x + dots[i].w, dots[i].y + dots[i].h);\n        grd.addColorStop(.0, \"hsla(\" + dots[i].c + \",50%,50%,.0)\");\n        grd.addColorStop(.2, \"hsla(\" + dots[i].c + 20 + \",50%,50%,.5)\");\n        grd.addColorStop(.5, \"hsla(\" + dots[i].c + 50 + \",70%,60%,.8)\");\n        grd.addColorStop(.8, \"hsla(\" + dots[i].c + 80 + \",50%,50%,.5)\");\n        grd.addColorStop(1., \"hsla(\" + (dots[i].c + 100) + \",50%,50%,.0)\");\n        ctx.shadowBlur = glow;\n        ctx.shadowColor = \"hsla(\" + dots[i].c + \",50%,50%,1)\";\n        ctx.fillStyle = grd;\n        ctx.rect(dots[i].x, dots[i].y, dots[i].w, dots[i].h);\n        ctx.fill();\n        ctx.closePath();\n        dots[i].x += dots[i].m / 100;\n        if (dots[i].x > w + maxWidth) {\n          dots.splice(i, 1);\n          dots.push({\n            x: 0,\n            y: Math.random() * h,\n            h: Math.random() * (maxHeight - minHeight) + minHeight,\n            w: Math.random() * (maxWidth - minWidth) + minWidth,\n            c: Math.random() * (hue + hueDif - (hue - hueDif)) + (hue - hueDif),\n            m: Math.random() * (maxSpeed - minSpeed) + minSpeed\n          });\n        }\n      }\n      window.requestAnimationFrame(render);\n    }\n    bgg.style.background = \"radial-gradient(ellipse at center, hsla(\" + hue + \",50%,50%,.8) 0%,rgba(0,0,0,0) 100%)\";\n    render();\n  }\n  destroy() {\n    document.querySelector('.crystalization').remove();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}