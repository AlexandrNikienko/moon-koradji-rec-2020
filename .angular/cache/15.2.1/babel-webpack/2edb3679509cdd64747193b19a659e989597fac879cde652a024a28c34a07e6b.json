{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { DATAFOLDER } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.existingParamsRoutes = ['artists', 'djs', 'releases'];\n    this.existingPramas = new Subject();\n    this.getExistingParams();\n  }\n  requestToData(item) {\n    const url = `${DATAFOLDER}${item}.json`;\n    return this.http.get(url).pipe(map(object => object[item]), shareReplay(1));\n  }\n  getExistingParams() {\n    const existingParams = [];\n    this.existingParamsRoutes.forEach(route => {\n      const url = `${DATAFOLDER}${route}.json`;\n      this.http.get(url).subscribe(object => {\n        if (Object.keys(object)[0] === 'releases') {\n          existingParams.push(object[route].map(obj => obj.releaseRoute));\n        } else {\n          existingParams.push(object[route].map(obj => obj.artistRoute));\n        }\n        if (existingParams.length > 0 && existingParams.length === this.existingParamsRoutes.length) {\n          this.existingPramas.next(existingParams.flat());\n        }\n      });\n    });\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}